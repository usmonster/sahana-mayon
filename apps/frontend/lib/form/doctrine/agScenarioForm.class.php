<?php

/**
 * extends BaseagScenarioForm
 *
 * PHP Version 5.3
 *
 * LICENSE: This source file is subject to LGPLv2.1 license
 * that is available through the world-wide-web at the following URI:
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * @author Charles Wisniewski, CUNY SPS
 *
 * Copyright of the Sahana Software Foundation, sahanafoundation.org
 */
class agScenarioForm extends BaseagScenarioForm
{

  /**
   * Initializes the array of datapoints for the scenario form.
   * */
  public function configure()
  {
    /**
     * Unset widgets that are auto-filled, unnecessary, or whose
     * relations are not properly defined without using embedded forms.
     * */
    unset($this['created_at'],
        $this['updated_at'],
        $this['ag_event_list']);

    /**
     * Configure widgets that have been autogenerated
     * keep only the few that are needed
     * */
  }

  public function setup()
  {
    sfProjectConfiguration::getActive()->loadHelpers(array ('Helper','Url', 'Asset', 'Tag'));
    $wikiUrl = url_for('@wiki');
    $this->setWidgets(
        array(
          'id' => new sfWidgetFormInputHidden(),
          'scenario' => new sfWidgetFormInputText(
              array(),
              array('class' => 'inputGray setWidgetsScenario')
          ),
          'description' => new sfWidgetFormTextarea(
              array(),
              array('class' => 'inputGray setWidgetsDesc')
          ),
        )
    );

    $this->setValidators(
        array(
          'id' => new sfValidatorChoice(
              array(
                'choices' => array($this->getObject()->get('id')),
                'empty_value' => $this->getObject()->get('id'),
                'required' => false)
          ),
          'scenario' => new sfValidatorRegex(
            array('required' => TRUE, 'pattern' => '/^[a-zA-Z0-9 _-]{4,64}$/', 'trim' => TRUE),
            array('invalid' => 'You must enter a valid name between 4 and 64 characters in length. ' .
              'Allowed Characters include: A-z, 0-9, space, underscore, and dash.')),
          'description' => new sfValidatorString(array('trim' => true, 'max_length' => 255, 'required' => false)),
        )
    );

    $this->validatorSchema->setPostValidator(
        new sfValidatorDoctrineUnique(
            array('model' => 'agScenario', 'column' => array('scenario'))
        )
    );
    $this->widgetSchema->setNameFormat('ag_scenario[%s]');
    $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);
    unset($this['created_at'],
        $this['updated_at'],
        $this['ag_event_list']);
    $this->widgetSchema->setLabels(
        array(
          'scenario' => 'Name <a href="<?php' . $wikiUrl . '/doku.php?id=tooltip:scenario_name&do=export_xhtmlbody" class="tooltipTrigger" title="Scenario Name">?</a>',
          'description' => 'Description <a href="<?php' . $wikiUrl . '/doku.php?id=tooltip:scenario_description&do=export_xhtmlbody" class="tooltipTrigger" title="Scenario Description">?</a>',
        //'facility_group' => 'Facility Groups'
        )
    );


    $sectionsDeco = new agWidgetFormSchemaFormatterSection($this->getWidgetSchema());
    $this->getWidgetSchema()->addFormFormatter('section', $sectionsDeco);
    $this->getWidgetSchema()->setFormFormatterName('section');
  }

}