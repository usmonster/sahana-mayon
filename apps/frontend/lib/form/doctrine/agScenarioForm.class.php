<?php

/**
 * extends BaseagScenarioForm
 *
 * PHP Version 5
 *
 * LICENSE: This source file is subject to LGPLv3.0 license
 * that is available through the world-wide-web at the following URI:
 * http://www.gnu.org/copyleft/lesser.html
 *
 * @author Charles Wisniewski, CUNY SPS
 *
 * Copyright of the Sahana Software Foundation, sahanafoundation.org
 */
class agScenarioForm extends BaseagScenarioForm
{
  /**
   * Initializes the array of datapoints for the scenario form.
   * */
  public function configure()
  {
    /**
     * Unset widgets that are auto-filled, unnecessary, or whose relations are not properly defined without using embedded forms.
     * */
    unset($this['created_at'],
        $this['updated_at'],
        $this['ag_event_list']);

    /**
     * Configure widgets that have been autogenerated
     * keep only the few that are needed
     * */
  }
  public function setup()
  {
    $this->setWidgets(array(
      'id'            => new sfWidgetFormInputHidden(),
      'scenario'      => new sfWidgetFormInputText(),
      'description'   => new sfWidgetFormInputText(),
    ));

    $this->setValidators(array(
      'id'            => new sfValidatorChoice(array('choices' => array($this->getObject()->get('id')), 'empty_value' => $this->getObject()->get('id'), 'required' => false)),
      'scenario'      => new sfValidatorString(array('max_length' => 64)),
      'description'   => new sfValidatorString(array('max_length' => 255, 'required' => false)),
    ));
    
    $this->validatorSchema->setPostValidator(
      new sfValidatorDoctrineUnique(array('model' => 'agScenario', 'column' => array('scenario')))
    );
    $this->widgetSchema->setNameFormat('ag_scenario[%s]');
    $this->errorSchema = new sfValidatorErrorSchema($this->validatorSchema);
    unset($this['created_at'],
        $this['updated_at'],
        $this['ag_event_list']);
    $this->widgetSchema->setLabels(array(
    'scenario' => 'Name',
    'description' => 'Description',
    'facility_group' => 'Facility Groups'
    ));
    //if is not new!
    $existingFRT =  Doctrine_Query::create()->select('DISTINCT aFR.facility_resource_type_id AS facility_resources')
                                            ->from('agScenarioFacilityResource aSFR, aSFR.agFacilityResource aFR,agScenarioFacilityGroup aSFG')
                                            ->where('aSFR.facility_resource_id = aFR.id AND aSFG.scenario_id = ?', $this->getObject()->getId());
    $existingFRT = $existingFRT->execute(array(), Doctrine::HYDRATE_NONE);

    //we need to get all unique facility resources for every facility group in the scenario
    //this will be useful in the 'final stage', showing the user that they do not have shift templates
    //defined for those scenario/facility/staff types
    if(!$existingFRT){
      /*create new shifttemplatecontainerform*/
      $facilityGroupContainer = new sfForm(array(), array());

      /* if the scenario already has existing facility groups, get them */
      if ($this->agScenarioFacilityGroups = Doctrine::getTable('agScenarioFacilityGroup')
              ->createQuery('agFG')
              ->select('agFG.*')
              ->from('agScenarioFacilityGroup agFG')
              ->where('scenario_id = ?', $this->getObject()->getId())
              ->execute())
      {
        /* for every existing shift template, create an agEmbeddedShiftTemplateForm and embed it into $facilitygroupResourceContainer */
        foreach ($this->agScenarioFacilityGroups as $facilityGroup)
        {
          $facilityGroupForm = new agEmbeddedScenarioFacilityGroupForm($facilityGroup);

          //$facilityResourceContainer->embedForm($facilityResource->getAgFacilityResourceType(), $facilityResourceForm);
          //$facilityResourceContainer->embedForm($facilityResource->getAgFacilityResourceType()-getDescription(), $facilityResourceForm);
          $facilityGroupId = $facilityGroup->getId();
          $facilityGroupContainer->embedForm('existing' . $facilityGroupId, $facilityGroupForm);
          $facilityGroupContainer->widgetSchema->setLabel('existing' . $facilityGroupId, false);
        }
      }
      /* create a blank shiftTemplateForm for each of the types to add */

      /* embed a new shift_template form into the shifttemplate container */

      $this->widgetSchema->setLabel(array('scenario_facility_group' => 'Facility Group'));

      /* embed the shift template container form into the scenario form */
      $facilityGroupForm = new agEmbeddedScenarioFacilityGroupForm();
      $facilityGroupForm->getObject()->scenario_id = $this->getObject()->getId();
      $facilityGroupForm->setDefault('scenario_id', $this->getObject()->getId());
      $facilityGroupContainer->embedForm('new',$facilityGroupForm);
      $this->embedForm('scenario_facility_group', $facilityGroupContainer);

      /* for each of the shift templates, provide 5 preview scenario shifts */

      /** @todo embed scenario facility group form
       *
       */
      //$this->getWidget('ag_scenario_facility_group_list')->setLabel('you must create a facility group with at least one facility resource type first');
      //$shiftTemplateForm->getWidgetSchema()->setAttributes(array('disabled' => 'disabled'));
    }
    else{
      /*create new shifttemplatecontainerform*/
      $shiftTemplateContainer = new sfForm(array(), array());

      /* if the scenario already has existing shift templates, get them */
      if ($this->agShiftTemplates = Doctrine::getTable('agShiftTemplate')
              ->createQuery('agST')
              ->select('agST.*')
              ->from('agShiftTemplate agST')
              ->where('scenario_id = ?', $this->getObject()->getId())
              ->execute())
      {
        /* for every existing shift template, create an agEmbeddedShiftTemplateForm and embed it into $facilitygroupResourceContainer */
        foreach ($this->agShiftTemplates as $shiftTemplate)
        {
          $shiftTemplateForm = new agEmbeddedShiftTemplateForm($shiftTemplate);

          //$facilityResourceContainer->embedForm($facilityResource->getAgFacilityResourceType(), $facilityResourceForm);
          //$facilityResourceContainer->embedForm($facilityResource->getAgFacilityResourceType()-getDescription(), $facilityResourceForm);
          $shiftTemplateId = $shiftTemplate->getId();
          $shiftTemplateContainer->embedForm('existing' . $shiftTemplateId, $shiftTemplateForm);
          $shiftTemplateContainer->widgetSchema->setLabel('existing' . $shiftTemplateId, false);
        }
      }
      /* create a blank shiftTemplateForm for each of the types to add */

      /* embed a new shift_template form into the shifttemplate container */


      /* embed the shift template container form into the scenario form */
      $shiftTemplateForm = new agEmbeddedShiftTemplateForm();
      $shiftTemplateForm->getObject()->scenario_id = $this->getObject()->getId();
      $shiftTemplateForm->setDefault('scenario_id', $this->getObject()->getId());
      $shiftTemplateContainer->embedForm('new',$shiftTemplateForm);

      $this->embedForm('shift_template', $shiftTemplateContainer);
      $this->widgetSchema->setLabel(array('shift_template' => 'Shift Templates'));
      /* for each of the shift templates, provide 5 preview scenario shifts */

    }
    
    $sectionsDeco = new agWidgetFormSchemaFormatterSection($this->getWidgetSchema());
    $this->getWidgetSchema()->addFormFormatter('section', $sectionsDeco);
    $this->getWidgetSchema()->setFormFormatterName('section');
  }
/**
 *
 * @param <type> $con doctrine connection
 * @param <type> $forms array of forms passed in the event of a recursed SeF
 * @return <type> 
 */
  public function saveEmbeddedForms($con = null, $forms = null)
  {
    if (null === $forms) {
      $forms = $this->embeddedForms;
    }
    if (is_array($forms))
    {
        
      foreach ($forms as $key => $form)
      {
        if ($form instanceof agEmbeddedScenarioFacilityGroupForm)
        {
          if($this->isNew()) //the form, in this context will always be new, or should be, if we're creating facility group forms here.
          {
            $newScenarioFacilityGroup = $form->getObject();
            if ($newScenarioFacilityGroup->valueisthere)
            {
              $existing = $form->getObject()->getAgScenarioFacilityResource();
              foreach($existing as $rec){$current[] = $rec;}
              //$existing = $this->object->agFacilityResource->getPrimaryKeys();
              $values = $form->getTaintedValues();
              //all we need to save, is the allocated list: it's order included(this is proving to be clumsy while working with a listbox, jquery is prefered)
              if($values) $values = $values['ag_facility_resource_order'];
              unset($form['ag_facility_resource_order']);
              unset($form['ag_facility_resource_list']);
              //since this is a new form, and the parent's form (the main scenario form) isn't saved yet(and is new)
              //there is no parent object id (scenario_id) yet.
              parent::saveEmbeddedForms($con);
              if($values)
              {
                /** this should be $current->getAgScenarioFacilityResource(), will it return an array? will it be cached? */
                if($current)  $toDelete = array_diff($current,$values);

                if(count($toDelete) >0)
                {
                  /** @todo clean this up, a subquery to delete on would be optimal */
                  $deleteRecs = Doctrine_Query::create()
                  ->select('a.facility_resource_id')
                  ->from('agScenarioFacilityResource a')
                  ->whereIn('a.facility_resource_id', $toDelete)->execute();
                  foreach($deleteRecs as $deletor)
                  {
                    $deletor->delete();
                  }
                }
                foreach($values as $key => $value)
                {
                  if( in_array($value,$current)) $agScenarioFacilityResource = $currentCheck;
                  else{
                    //if there isn't an entry in agScenarioFacilityResource for this group/facility_resource...
                    $agScenarioFacilityResource = new agScenarioFacilityResource();
                    $agScenarioFacilityResource->scenario_facility_group_id = $this->getObject()->getId();
                    $agScenarioFacilityResource->activation_sequence = $key +1;
                    $agScenarioFacilityResource->facility_resource_id = $value;
                    $agScenarioFacilityResource->facility_resource_allocation_status_id = 4;
                    }
                  $agScenarioFacilityResource->save();
                }
              }
              else
              {
                  /**
                   * @todo there are no values, so we need to delete
                   *   if there aren't values in $values that exist in $checkArray, or if
                   *  those items have changed.. (activation order, is the only thing)
                   *  we need to update said item
                   */
              }
            }
            else
            {
              unset($forms[$key]);
            }
            /** @todo handle embedded scenario facility group form
            *         much like done below.  make this form neater.
            */
          }
        }
        if ($form instanceof agEmbeddedShiftTemplateForm)
        {
          if ($form->isNew())
          {
            $newShiftTemplate = $form->getObject();
            if ($newShiftTemplate->staff_resource_type_id && $newShiftTemplate->task_id
            && $newShiftTemplate->facility_resource_type_id && $newShiftTemplate->shift_template)
            {
              $newShiftTemplate->setScenarioId(($this->getObject()->getId()));
              $newShiftTemplate->save();
              $this->getObject()->getAgShiftTemplate()->add($newShiftTemplate);
              unset($forms[$key]);
            }
            else
            {
              unset($forms[$key]);
            }
          }
          else {
            $oldShiftTemplate = $form->getObject();
            if ($oldShiftTemplate->staff_resource_type_id && $oldShiftTemplate->task_id
            && $oldShiftTemplate->facility_resource_type_id && $oldShiftTemplate->shift_template)
            {
              $form->getObject()->save();
            }
            else
            {
              $form->getObject()->delete();
            }
            unset($forms[$key]);
          }
        }
      }
    }
    return parent::saveEmbeddedForms($con, $forms);
  }
}