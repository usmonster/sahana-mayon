<?php

/**
 * Agasti Person Form Class - A class to generate either a 'new person' or
 * 'edit person' form
 *
 * PHP Version 5.3
 *
 * LICENSE: This source file is subject to LGPLv2.1 license
 * that is available through the world-wide-web at the following URI:
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * @author Charles Wisniewski, CUNY SPS
 * @author Nils Stolpe, CUNY SPS
 * @author Ilya Gulko, CUNY SPS
 *
 * @todo Major clean-up required.
 *
 * Copyright of the Sahana Software Foundation, sahanafoundation.org
 * */
class agPersonForm extends BaseagPersonForm
{
  /**
  * Configures the form, setting up widgets and some meta-data.
  **/
  public function configure()
  {
    sfProjectConfiguration::getActive()->loadHelpers(array ('Helper','Url', 'Asset', 'Tag'));
    $this->wikiUrl = url_for('@wiki');
    $this->configureWidgets();
    $this->agEntity = $this->getObject()->getAgEntity();
    $this->embedAgPersonForms();
  }

  public function configureWidgets()
  {
    unset($this['created_at'],
        $this['updated_at'],
        $this['ag_language_list'],
        $this['ag_country_list'],
        $this['ag_aid_provider_list'],
        $this['ag_import_list'],
        $this['ag_residential_status_list'],
        $this['ag_import_type_list'],
        $this['ag_account_list'],
        $this['ag_phone_contact_type_list'],
        $this['ag_email_contact_type_list'],
        $this['ag_address_contact_type_list'],
        $this['ag_phone_contact_list'],
        $this['ag_email_contact_list'],
        $this['ag_email_contact'],
        $this['ag_person_name_list'],
        $this['ag_person_name_type_list'],
        $this['entity_id'],
        $this['ag_person_custom_field_list']);

    /**
     * Remove multiple selection from widgets that have been autogenerated with multiple selection
     * but don't actually need it.
     * */
    $this->setWidget(
        'ag_sex_list', new sfWidgetFormDoctrineChoice(
            array('multiple' => false, 'model' => 'agSex')
        )
    );
    $this->setWidget(
        'ag_ethnicity_list', new sfWidgetFormDoctrineChoice(
            array('multiple' => false, 'model' => 'agEthnicity')
        )
    );
    $this->setWidget(
        'ag_marital_status_list', new sfWidgetFormDoctrineChoice(
            array('multiple' => false, 'model' => 'agMaritalStatus')
        )
    );

    /**
     * Give the list widgets more aesthetically appealing and descriptive labels.
     * */
    $this->widgetSchema->setLabel('ag_sex_list', 'Sex');
    $this->widgetSchema->setLabel('ag_religion_list', 'Religion');
    $this->widgetSchema->setLabel('ag_profession_list', 'Profession');
    $this->widgetSchema->setLabel('ag_nationality_list', 'Nationality');
    $this->widgetSchema->setLabel('ag_ethnicity_list', 'Ethnicity');
    $this->widgetSchema->setLabel('ag_marital_status_list', 'Marital Status');

    /**
     * Narrow down the options for select lists by using app_display. Lots of repetetive code,
     * could be moved to function.
     * */
    $this->widgetSchema['ag_nationality_list']->addOption(
        'query', agDoctrineQuery::create()->select('a.nationality')->from('agNationality a')->where('a.app_display = 1')
    );

    $this->widgetSchema['ag_religion_list']->addOption(
        'query', agDoctrineQuery::create()->select('a.religion')->from('agReligion a')->where('a.app_display = 1')
    );

    $this->widgetSchema['ag_profession_list']->addOption(
        'query',
        agDoctrineQuery::create()->select('a.profession')->from('agProfession a')->where('a.app_display = 1')
    );

    $this->widgetSchema['ag_ethnicity_list']->addOption(
        'query',
        agDoctrineQuery::create()->select('a.ethnicity')->from('agEthnicity a')->where('a.app_display = 1')
    );

    $this->widgetSchema['ag_sex_list']->addOption(
        'query',
        agDoctrineQuery::create()->select('a.sex')->from('agSex a')->where('a.app_display = 1')
    );

    $this->widgetSchema['ag_marital_status_list']->addOption(
        'query',
        agDoctrineQuery::create()->select('a.marital_status')->from('agMaritalStatus a')->where('a.app_display = 1')
    );
  }

  /**
   * This function sets up the embedded forms by
   * calling all of the embed[Foo]Forms methods.
   * */
  public function embedAgPersonForms()
  {
    $this->embedDateOfBirthForm();
    $this->embedLanguageForm();
    $this->embedNameForm();
    $this->embedEmailForm();
    $this->embedPhoneForm();
    $this->embedAddressForm();
  }

  /**
   * This function sets up the date of birth form.
   *
   * @todo refactor this function similarly to embedNameForm() and embedEmailForm().
   * Get rid of default use.
   * */
  public function embedDateOfBirthForm()
  {
    $dateOfBirthForm = new agEmbeddedPersonDateOfBirthForm($this->getObject()->getAgPersonDateOfBirth());
    $dateOfBirthForm->getWidgetSchema()->setLabel('date_of_birth', 'Date of Birth <a href="' . $this->wikiUrl .  '/doku.php?id=tooltip:date_of_birth&do=export_xhtmlbody" class="tooltipTrigger" title="Date of Birth">?</a>');
    $dateOfBirthForm->setDefault('person_id', $this->getObject()->id);
    $this->embedForm('date of birth', $dateOfBirthForm);
  }

  /**
   * This function sets up language forms using agEmbeddedAgPersonMjAgLanguageForm
   * and agEmbeddedAgPersonLanguageCompetencyForm.
   *
   * @todo refactor this function similarly to embedNameForm() and embedEmailForm().
   * */
  public function embedLanguageForm()
  {
    $this->ag_person_language_formats = Doctrine::getTable('agLanguageFormat')->createQuery('a')->execute();
    //create the container form and set it's formatter.
    $languageContainer = new sfForm();
    $langConDeco = new agWidgetFormSchemaFormatterSubContainer($languageContainer->getWidgetSchema());
    $languageContainer->getWidgetSchema()->addFormFormatter('langConDeco', $langConDeco);
    $languageContainer->getWidgetSchema()->setFormFormatterName('langConDeco');

    //set the max limit for the iterator for the $langSubContainer forms to 2.
    //Then check the languages, if they're greater than 1, reset it to that greater number.
    $m = 2;
//    if (count($this->getObject()->getAgPersonMjAgLanguage()) > 1) {
//      $m = count($this->getObject()->getAgPersonMjAgLanguage()) + 1;
//    }

    //Create the $languageSubContainer forms and set their formatters.
    for ($i = 1; $i <= $m; $i++) {
      $languageSubContainer = new sfForm(); //subcontainer form to hold language and join forms.
      $langSubConDeco = new agWidgetFormSchemaFormatterSubContainer($languageSubContainer->getWidgetSchema());
      $languageSubContainer->getWidgetSchema()->addFormFormatter('langSubConDeco', $langSubConDeco);
      $languageSubContainer->getWidgetSchema()->setFormFormatterName('langSubConDeco');

      $personLanguages = $this->getObject()->getAgPersonMjAgLanguage();
      // If the current person already has some languages,
      // set the default id and language values of the form.
      $languageForm = new agEmbeddedAgPersonMjAgLanguageForm();
      $languageForm->setDefault('priority', $i);
      if (isset($personLanguages[$i - 1])) {
        //$languageForm = new agEmbeddedAgPersonMjAgLanguageForm($personLanguages[$i - 1]);
        $languageForm->setDefaults(
            array(
              'language_id' => $personLanguages[$i - 1]->language_id,
              'id' => $personLanguages[$i - 1]->id,
              //Right now, priority is set to the order forms show up in.
              // Somewhat sensible, maybe indicate this on frontend?
              'priority' => $i
            )
        );
      }
      // If not, just create the empty forms.
      // Only create the labels if this is the first language, so everything shows up in a matrix.
      if ($i <> 1) {
        $languageForm->widgetSchema->setLabel('language_id', false);
      } else {
        $languageForm->widgetSchema->setLabel('language_id', 'Language Name');
      }

      $languageSubContainer->embedForm('language', $languageForm);
      $languageSubContainer->widgetSchema->setLabel('language', false);

      // Create the forms for language competency, one for each format.
      // If the person has them already, stick in the objects.
      foreach ($this->ag_person_language_formats as $langFormat) {
        $formatForm = new agEmbeddedAgPersonLanguageCompetencyForm();
        $formatForm->setDefault('language_format_id', $langFormat->id);
        // If the $languageForm has a default for language, check for related competencies.
        if ($languageForm->getDefault('language_id') <> null) {
          $q = agDoctrineQuery::create()
                  ->select('a.id')
                  ->from('agPersonMjAgLanguage a')
                  ->where('a.person_id = ?', $this->getObject()->id)
                  ->andWhere('a.language_id =?', $languageForm->getDefault('id'));

          $competencyQuery = Doctrine_query::create()
                  ->select('a.*')
                  ->from('agPersonLanguageCompetency a')
                  ->where('person_language_id = ?', $languageForm->getDefault('id'))
                  ->andWhere('language_format_id = ?', $langFormat->id);
          // Check if a competency has been assigned to the current language/language-format combo.
          // If it has, fill the form w/ the object. If not, make an empty form.
          if ($competencyObject = $competencyQuery->fetchOne()) {
            $formatForm = new agEmbeddedAgPersonLanguageCompetencyForm($competencyObject);
          }
        } else {
          $formatForm->setDefault('language_format_id', $langFormat->id);
        }
        // If the $languagForm doesn't have an object, make an empty $formatForm.
        // Same as with $languageForm. We only want labels for the first row of objects.
        // The others will fall directly under, so the labels should be understandable.
        if ($i <> 1) {
          $formatForm->widgetSchema->setLabel('language_competency_id', false);
        } else {
          $formatForm->widgetSchema->setLabel(
              'language_competency_id',
              ucwords($langFormat->language_format)
          );
        }
        $languageSubContainer->embedForm($langFormat->language_format, $formatForm);
        $languageSubContainer->widgetSchema->setLabel($langFormat->language_format, false);
      }
      $languageContainer->embedForm('language ' . $i, $languageSubContainer);
      $languageContainer->widgetSchema->setLabel('language ' . $i, false);
    }

    $this->embedForm('languages', $languageContainer);
  }

  /**
   * This function sets up the embedded agEmbeddedAgPersonNameForms, one for each agPersonNameType,
   * populated with the agPersonName that corresponds to the current agPerson and
   * agPersonNameType (if it exists).
   * */
  public function embedNameForm()
  {
    $defaults = json_decode(
                                      agDoctrineQuery::create()
                                        ->select('value')
                                        ->from('agGlobalParam')
                                        ->where('datapoint = \'default_name_components\'')
                                        ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR),
                                      true
                          );
    // Make the default name types just retrieve from agGlobalParam into an array. Keys are the order,
    // values are the values.
    foreach($defaults as $default) {
      $defaultNameComponents[$default[2]] = $default[0];
    }
    // Get the name types we need, as determined by the defaults.
    $nameTypesPreSort = agDoctrineQuery::create()
                   ->select('id')
                   ->addSelect('person_name_type')
                   ->from('agPersonNameType')
                   ->whereIn('person_name_type', $defaultNameComponents)
                   ->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
    // Make the name types array by matching between $defaultNameComponents and $nameTypesPreSort,
    // using the key of default to determine order.
    foreach($defaultNameComponents as $key => $defaultNameComponent) {
      foreach($nameTypesPreSort as $nameTypePreSort) {
        if($nameTypePreSort['person_name_type'] == $defaultNameComponent) {
          $nameTypes[$key]['person_name_type'] = $nameTypePreSort['person_name_type'];
          $nameTypes[$key]['id'] = $nameTypePreSort['id'];
        }
      }
    }
    $this->ag_person_name_types = Doctrine::getTable('agPersonNameType')->createQuery('a')->execute();
    $nameContainer = new sfForm();
    $nameConDeco = new agWidgetFormSchemaFormatterSubContainer($nameContainer->getWidgetSchema());
    $nameContainer->getWidgetSchema()->addFormFormatter('nameConDeco', $nameConDeco);
    $nameContainer->getWidgetSchema()->setFormFormatterName('nameConDeco');
    foreach ($nameTypes as $nameType) {
      if ($id = $this->getObject()->id) {
        $nameObject = agDoctrineQuery::create()
                ->from('agPersonName pn')
                ->where('pn.id IN (SELECT jn.person_name_id FROM agPersonMjAgPersonName jn WHERE jn.person_id = ? AND person_name_type_id = ?)', array($id, $nameType['id']))
                ->execute()->getFirst();
      }
      $nameForm = new agEmbeddedAgPersonNameForm(isset($nameObject) ? $nameObject : null);
      $nameForm->widgetSchema->setLabel('person_name', ucwords($nameType['person_name_type']));
      $nameContainer->embedForm($nameType['person_name_type'], $nameForm);
    }
    $this->embedForm('name', $nameContainer);
  }

  /**
   * This block sets up the embedded agEmbeddedAgEmailContactForms, one for each
   * agEmailContactType, populated with the agPersonName that corresponds to the current
   * agPerson and agEmailContactType (if it exists).
   *
   * @todo     make a new formatter for these forms to use and set it up, so we
   *           don't need to set label to false.
   * */
  public function embedEmailForm()
  {
    $this->ag_email_contact_types = Doctrine::getTable('agEmailContactType')->createQuery('a')->execute();

    $emailContainer = new sfForm();
    $emailContainer->widgetSchema->setFormFormatterName('list');
    foreach ($this->ag_email_contact_types as $emailContactType) {
      if ($id = $this->getObject()->entity_id) {
        $emailObject = Doctrine_query::create()
                ->from('agEmailContact ec')
                ->where('ec.id IN (SELECT jn.email_contact_id FROM agEntityEmailContact jn WHERE jn.entity_id = ? AND email_contact_type_id = ?)', array($id, $emailContactType->id))
                ->execute()->getFirst();
      }
      $emailContactForm = new agEmbeddedAgEmailContactForm(isset($emailObject) ? $emailObject : null);
      $emailContactForm->widgetSchema->setLabel('email_contact', false);
      $emailContainer->embedForm($emailContactType->getEmailContactType(), $emailContactForm);
    }
    $this->embedForm('email', $emailContainer);
  }

  /**
   * This function sets up the embedded agEmbeddedAgPhoneContactForms, one for each
   * agPhoneContactType, populated with the agPersonName that corresponds to the
   * current agPerson and agPhoneContactType (if it exists).
   *
   * @todo refactor this function similarly to embedNameForm() and embedEmailForm().
   * */
  public function embedPhoneForm()
  {
    $this->ag_phone_contact_types = Doctrine::getTable('agPhoneContactType')->createQuery('a')->execute();

    $phoneContainer = new sfForm(array(), array());
    $phoneContainer->widgetSchema->setFormFormatterName('list');
    foreach ($this->ag_phone_contact_types as $phoneContactType) {
      if ($id = $this->getObject()->entity_id) {
        $phoneObject = Doctrine_query::create()
                ->from('agPhoneContact pc')
                ->where('pc.id IN (SELECT jn.phone_contact_id FROM agEntityPhoneContact jn WHERE jn.entity_id = ? AND phone_contact_type_id = ?)', array($id, $phoneContactType->id))
                ->execute()->getFirst();
      }
      $phoneContactForm = new agEmbeddedAgPhoneContactForm(isset($phoneObject) ? $phoneObject : null);
      $phoneContactForm->widgetSchema->setLabel('phone_contact', false);
      $phoneContainer->embedForm($phoneContactType->getPhoneContactType(), $phoneContactForm);
    }

    $this->embedForm('phone', $phoneContainer);
  }

  /**
   * This function sets up address forms.
   *
   * @todo refactor this function similarly to embedNameForm() and embedEmailForm().
   * */
  public function embedAddressForm()
  {
    $this->address_contact_types = Doctrine::getTable('agAddressContactType')->createQuery('a')->execute();
    $this->address_formats = Doctrine::getTable('agAddressFormat')
            ->createQuery('addressFormat')
            ->select('af.*, ae.*')
            ->from('agAddressFormat af, af.agAddressElement ae')
            ->execute();

$addressIds = agDoctrineQuery::create()
                ->select('address_id')
                ->from('agEntityAddressContact')
                ->where('entity_id = ?', $this->getObject()->getEntityId())
                ->execute(array(), 'single_value_array');

    // This loop makes a 3d array of line sequence values (as the first level key),
    // inline sequence values (as the second level key), address element values
    // (as the third level string key), and address element ids (as the third level value).

    /**
     * @todo this works fine for now, since we only have one address format, but should be
     * refactored to create a new array from values in the agAddressFormat table for each
     * address_standard_id in that table.
     * */
//    foreach ($this->address_formats as $af) {
//      $addressElements[$af->line_sequence][$af->inline_sequence][$af->getAgAddressElement()->address_element] = $af->getAgAddressElement()->id;
//    }

    foreach ($this->address_formats as $af) {
      $addressElements[$af->line_sequence][$af->inline_sequence][$af->getAgAddressElement()->address_element]['id'] = $af->getAgAddressElement()->id;
      $addressElements[$af->line_sequence][$af->inline_sequence][$af->getAgAddressElement()->address_element]['fieldType'] = $af->getAgFieldType()->getFieldType();
    }
    $addressContainer = new sfForm(array(), array());
    $addressContainer->widgetSchema->setFormFormatterName('list');

    $stateList = Doctrine::getTable('agAddressValue')
            ->createQuery('addressStates')
            ->select('a.value')
            ->from('agAddressValue a')
            ->where('a.address_element_id = 4');

    $this->entityAddress = Doctrine::getTable('agEntity')
            ->createQuery('entityAddresses')
            ->select('e.*, eac.*, act.*, a.*, as.*, aav.*, av.*, p.*, ae.*')
            ->from(
                'agEntity e, e.agEntityAddressContact eac, eac.agAddressContactType act,
              eac.agAddress a, a.agAddressStandard as, a.agAddressMjAgAddressValue aav,
              aav.agAddressValue av, av.agAddressElement ae, e.agPerson p'
            )
            ->where('e.id = ?', $this->agEntity->getId())
            ->fetchOne();


    foreach ($this->address_contact_types as $address_contact_type) {
      $addressSubContainer = new sfForm(array(), array());
      // Sublevel container forms beneath address to hold a complete address for each address type.
      foreach ($addressElements as $ae) {
        foreach ($ae as $addressElement) {
          $valueForm = new agEmbeddedAgAddressValueForm();
          // Lowest level address form, actually holds the data.
          $valueForm->setDefault('address_element_id', $addressElement[key($addressElement)]['id']);
          //set the default address_element_id.
          $valueForm->widgetSchema->setLabel('value', false);
          //hide the 'value' field label.
          // This sets the widget for the agEmbeddedAddressValueForm. Generally, it will be a text
          // widget, but in the case of things like state, a select box is preferred.
          if ($addressElement[key($addressElement)]['fieldType'] == 'sfWidgetFormDoctrineChoice') {
            $valueForm->setWidget(
                'value',
                new sfWidgetFormDoctrineChoice(
                    array(
                      'multiple' => false,
                      'model' => 'agAddressValue',
                      'add_empty' => true,
                      'key_method' => 'getValue'
                    ),
                    array('class' => 'inputGray')
                )
            );
            //key_method sets the option value of the constructed
            //select list to the value rather than id.
            $valueForm->widgetSchema->setLabel('value', false);
            $valueForm->widgetSchema['value']->addOption(
                'query',
                $stateList
            );
          }

          if (isset($this->entityAddress) && $this->entityAddress) {
            // Each of the agPerson's existing address records.
            foreach ($this->entityAddress->getAgEntityAddressContact() as $current) {
              if ($current->address_contact_type_id == $address_contact_type->id) {
                $addressValueElement = $current->getId();

                //Get the joins from agAddress to agAddressValue
                foreach ($current->getAgAddress()->getAgAddressMjAgAddressValue() as $av) {
                  if ($av->getAgAddressValue()->getAgAddressElement()->address_element == key($addressElement)) {
                    $valueForm->setDefault('value', $av->getAgAddressValue()->value);
                    $valueForm->id_holder = $av->getAgAddressValue()->id;
                  }
                }
              }
            }
          }
          //set an addressType property for the form so the type can be used when saving.
          $valueForm->addressType = $address_contact_type->address_contact_type;
          //Embed the address elements.
          $addressSubContainer->embedForm(key($addressElement), $valueForm);
        }
      }
      //Embed the addresses-by-type
      $addressContainer->embedForm($address_contact_type, $addressSubContainer);
    }
    //Embed all the addresses into agPersonForm.
    $this->embedForm('address', $addressContainer);
  }

  /**
   * Saves data in the embedded date of birth form.
   *
   * @param agEmbeddedPersonDateOfBirthForm $form
   *
   * @todo: The '0000-00-00' below is pretty hackish and should be fixed. It
   * prevents a DB error for a field that should not be null formValuesAreBlank()
   * or something similar should really be used, in updateObject, to catch this
   * earlier and unset.
   * */
  public function saveDateOfBirthForm($form)
  {
    if ($form->getObject()->person_id == null && $form->getObject()->date_of_birth <> '0000-00-00') {
      $form->getObject()->person_id = $this->getObject()->id;
      $form->getObject()->save();
    } elseif ($form->getObject()->date_of_birth == '0000-00-00' && $form->getObject()->person_id <> null) {
      $form->getObject()->delete();
    } elseif ($form->getObject()->date_of_birth <> '0000-00-00' && $form->getObject()->person_id <> null) {
      $form->getObject()->save();
    }
  }

  /**
   * Saves data in an embedded name form.
   *
   * @param string $key
   * the key of the agEmbeddedAgPersonNameForm being acted on. It should correspond to the name_type
   * value that is linked to the name and person in the agPersonMjAgPersonName table.
   *
   * @param agEmbeddedAgPersonNameForm()
   * the name form being saved
   *
   * @param array $values
   * incoming values from the form, retrieved in saveEmbeddedForms()
   * */
  public function saveNameForm($key, $form, $values)
  {
    $form->updateObject($values);
    // Find the agPersonNameType()->id for the current form using its $key
    // (which corresponds to an agPersonNameType).
    $typeId = agDoctrineQuery::create()
            ->select('a.id')
            ->from('agPersonNameType a')
            ->where('a.person_name_type = ?', $key)
            ->execute(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    // Check to see if the name object is unmodified and that a value other than
    // null was submitted.
    if ($form->getObject()->isModified() && $form->getObject()->person_name <> null) {
      // See if the submitted name already exists in the db.
      $nameObject = Doctrine::getTable('agPersonName')
              ->findByDql('person_name = ?', $form->getObject()->person_name)
              ->getFirst();

      // If it doesn't, create a new agPersonName() object and populate it with the submitted name.
      if ($nameObject == false) {
        $nameObject = new agPersonName();
        $nameObject->person_name = $form->getObject()->person_name;
        $nameObject->save();
      }

      // See if there is an agPersonMjAgPersonName() object for this agPerson
      // and the agPersonNameType retrived by the above query.
      $joinObject = agDoctrineQuery::create()
              ->from('agPersonMjAgPersonName j')
              ->where(
                  'j.person_name_type_id = ? AND j.person_id = ?',
                  array($typeId, $this->getObject()->id)
              )
              ->execute()->getFirst();

      if ($joinObject instanceof agPersonMjAgPersonName) {
        $joinObject->person_name_id = $nameObject->id;
        // unlink() is called here because Doctrine still has the relation to the
        // old name object and will throw a duplicate entry error as it tries to
        // update that record's person_name value to the same value as $nameObject.
        // unlink() prevents this.
        $joinObject->unlink('agPersonName');
        $joinObject->save();
      } else {
        $joinObject = new agPersonMjAgPersonName();
        $joinObject->person_id = $this->getObject()->id;
        $joinObject->person_name_type_id = $typeId;
        $joinObject->person_name_id = $nameObject->id;
        $joinObject->priority = 1;
        $joinObject->save();
      }
      // Check if the agEmbeddedAgPersonNameForm() was populated on page render
      // but cleared before submission. If so, the related
      // agPersonMjAgPersonName object will be deleted.
    } elseif ($form->getObject()->isModified() && $form->getObject()->person_name == null) {
      $joinObject = agDoctrineQuery::create()
              ->from('agPersonMjAgPersonName j')
              ->where('j.person_name_type_id = ? AND j.person_id = ?', array($typeId, $this->getObject()->id))
              ->execute()->getFirst();
      $joinObject->delete();
      // Check if the form was unpopulated on render and submission.
      // If it was, return and unset the form, no processing is needed.
    } elseif (!$form->getObject()->isModified() && $form->getObject()->person_name == null && $form->getDefault('person_name') == null) {
      return;
    }
  }

  /**   * **************************************************************************
   * Saves data in an embedded email form.
   *
   * *************************************************************************** */
  public function saveEmailForm($key, $form, $values)
  {
    $form->updateObject($values);

    // Find the agEmailContactType()->id for the current form using its $key
    // (which corresponds to an agEmailContactType).
    $typeId = agDoctrineQuery::create()
            ->select('a.id')
            ->from('agEmailContactType a')
            ->where('a.email_contact_type = ?', $key)
            ->execute(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    if ($form->getObject()->isModified() && $form->getObject()->email_contact <> null) {
      $emailObject = Doctrine::getTable('agEmailContact')
              ->findByDql('email_contact = ?', $form->getObject()->email_contact)
              ->getFirst();

      if ($emailObject == false) {
        $emailObject = new agEmailContact();
        $emailObject->email_contact = $form->getObject()->email_contact;
        $emailObject->save();
      }

      $joinObject = agDoctrineQuery::create()
              ->from('agEntityEmailContact j')
              ->where(
                  'j.email_contact_type_id = ? AND j.entity_id = ?',
                  array($typeId, $this->getObject()->entity_id)
              )
              ->execute()->getFirst();

      if ($joinObject instanceof agEntityEmailContact) {
        $joinObject->email_contact_id = $emailObject->id;
        $joinObject->unlink('agEmailContact');
        $joinObject->save();
      } else {
        $joinObject = new agEntityEmailContact();
        $joinObject->entity_id = $this->getObject()->entity_id;
        $joinObject->email_contact_type_id = $typeId;
        $joinObject->email_contact_id = $emailObject->id;
        $joinObject->priority = $typeId;
        $joinObject->save();
      }
    } elseif ($form->getObject()->isModified() && $form->getObject()->email_contact == null) {
      $joinObject = agDoctrineQuery::create()
              ->from('agEntityEmailContact j')
              ->where(
                  'j.email_contact_type_id = ? AND j.entity_id = ?',
                  array($typeId, $this->getObject()->entity_id)
              )
              ->execute()->getFirst();
      $joinObject->delete();
    } elseif (!$form->getObject()->isModified() && $form->getObject()->email_contact == null && $form->getDefault('email_contact') == null) {
      return;
    }
  }

  /*   * ***************************************************************************
   * Saves data in an embedded phone form.
   *
   * *************************************************************************** */

  public function savePhoneForm($key, $form, $values)
  {
    $form->updateObject($values);

    $typeId = agDoctrineQuery::create()
            ->select('a.id')
            ->from('agPhoneContactType a')
            ->where('a.phone_contact_type = ?', $key)
            ->execute(null, Doctrine_Core::HYDRATE_SINGLE_SCALAR);

    if ($form->getObject()->isModified() && $form->getObject()->phone_contact <> null) {
      $phoneObject = Doctrine::getTable('agPhoneContact')
              ->findByDql('phone_contact = ?', $form->getObject()->phone_contact)
              ->getFirst();

      if ($phoneObject == false) {
        $phoneObject = new agPhoneContact();
        $phoneObject->phone_contact = $form->getObject()->phone_contact;
        $phoneObject->phone_format_id = $form->getObject()->phone_format_id;
        $phoneObject->save();
      }

      $joinObject = agDoctrineQuery::create()
              ->from('agEntityPhoneContact j')
              ->where(
                  'j.phone_contact_type_id = ? AND j.entity_id = ?',
                  array($typeId, $this->getObject()->entity_id)
              )
              ->execute()->getFirst();

      if ($joinObject instanceof agEntityPhoneContact) {
        $joinObject->phone_contact_id = $phoneObject->id;
        $joinObject->unlink('agPhoneContact');
        $joinObject->save();
      } else {
        $joinObject = new agEntityPhoneContact();
        $joinObject->entity_id = $this->getObject()->entity_id;
        $joinObject->phone_contact_type_id = $typeId;
        $joinObject->phone_contact_id = $phoneObject->id;
        $joinObject->priority = $typeId;
        $joinObject->save();
      }
    } elseif ($form->getObject()->isModified() && $form->getObject()->phone_contact == null) {
      $joinObject = agDoctrineQuery::create()
              ->from('agEntityPhoneContact j')
              ->where(
                  'j.phone_contact_type_id = ? AND j.entity_id = ?',
                  array($typeId, $this->getObject()->entity_id)
              )
              ->execute()->getFirst();
      $joinObject->delete();
    } elseif (!$form->getObject()->isModified() && $form->getObject()->phone_contact == null && $form->getDefault('phone_contact') == null) {
      return;
    }
  }

  /*   * ***************************************************************************
   * Saves data in an embedded address form.
   *
   * @todo refactor and clean this up along the lines of phone, name, and email.
   * *************************************************************************** */

  public function saveAddressForm($form)
  {
    //This value is only set for agEmbeddedAgAddressValueForms.
    // Used due to multi-level complexity of address.
    //This query finds the address_contact_type ID we need for the next query.
    $typeQuery = Doctrine::getTable('agAddressContactType')->createQuery('b')
            ->select('b.id')
            ->from('agAddressContactType b')
            ->where('b.address_contact_type = ?', $form->addressType);

    $typeId = $typeQuery->fetchOne()->id;

    //This query gets the person's agEntityAddressContact object, based on
    //person_id and address_contact_type_id (as $typeId).
    $joinEntityAddressQuery = Doctrine::getTable('agEntityAddressContact')->createQuery('c')
            ->select('c.id')
            ->from('agEntityAddressContact c')
            ->where('c.address_contact_type_id = ?', $typeId)
            ->andWhere('c.entity_id = ?', $this->getObject()->entity_id);
    //Check if the agEmbeddedAgAddressValueForm has a value.

    if ($form->getObject()->value <> null) {
      // Get an agEntityAddressContact object from $joinEntityAddressQuery.
      // Then create a new agEntityAddressContactForm
      // and put the retrieved object inside it. Set its priority to $typeId
      if ($join = $joinEntityAddressQuery->fetchOne()) {
        $joinEntityAddressForm = new agEntityAddressContactForm($join);
        $joinEntityAddressForm->getObject()->priority = $typeId;
      }
      // Or create a new agAddress, set its address_standard_id, and save it. Then create
      // agEntityPhoneContactForm to be populated later and set its priority and address_id.
      else {
        $newAddress = new agAddress();
        $newAddress->address_standard_id = 1;
        $newAddress->save();
        $joinEntityAddressForm = new agEntityAddressContactForm();
        $joinEntityAddressForm->getObject()->priority = $typeId;
        $joinEntityAddressForm->getObject()->address_id = $newAddress->id;
        $joinEntityAddressForm->getObject()->address_contact_type_id = $typeId;
        $joinEntityAddressForm->getObject()->entity_id = $this->getObject()->entity_id;
        $joinEntityAddressForm->getObject()->save();
      }

      // Check if the agAddressValue has changed since the page was rendered.
      if ($form->getObject()->value <> $form->getDefault('value')) {
        // Store the newly entered value as $addressValueLookUp. Then revert the object
        // to its default values from the page render. This prevents a duplicate entry error.
        $addressValueLookUp = $form->getObject()->value;
        $form->updateObject($form->getDefaults());

        // Create a query to see if the submitted address value, as $addressValueLookUp,
        //  already exists
        // in the database.
        $addressValueQuery = Doctrine::getTable('agAddressValue')->createQuery('a')
                ->select('a.id')
                ->from('agAddressValue a')
                ->where('a.value = ?', $addressValueLookUp)
                ->andWhere('a.address_element_id = ?', $form->getObject()->address_element_id);

        // If it does...
        if ($queried = $addressValueQuery->fetchOne()) {
          // If it exists, get an agAddressMjAgAddressValue object that joins
          // the id of the agAddress being worked with and the id of the original
          // agAddressValue being worked with. Used to change an address_value_id
          // on the agAddressMjAgAddressValue object. id_holder is only set for
          // already joined address values.
          if (isset($form->id_holder)) {
            $joinAddressValueQuery = Doctrine::getTable('agAddressMjAgAddressValue')->createQuery('a')
                    ->select('a.id')
                    ->from('agAddressMjAgAddressValue a')
                    ->where('a.address_value_id = ?', $form->id_holder)
                    ->andWhere('a.address_id = ?', $joinEntityAddressForm->getObject()->address_id);

            $joinAddressValue = $joinAddressValueQuery->fetchOne();
            // reassign the agAddressValue of the join to the newly selected value.
            $joinAddressValue->address_value_id = $queried->id;
            $joinAddressValue->save();
            //unset($forms[$key]);
          } else {
            $joinAddressValue = new agAddressMjAgAddressValue();
            $joinAddressValue->address_id = $joinEntityAddressForm->getObject()->address_id;
            $joinAddressValue->address_value_id = $queried->id;
            $joinAddressValue->save();
            //unset($forms[$key]);
          }
        }
        // If the entered address_value isn't in the database already,
        // make a new agAddressValue object, populate it with the new
        // address value, and save it.
        elseif (!$queried = $addressValueQuery->fetchOne()) {
          $newAddressValue = new agAddressValue();
          $newAddressValue->value = $addressValueLookUp;
          $newAddressValue->address_element_id = $form->getObject()->address_element_id;
          $newAddressValue->save();

          if (isset($form->id_holder)) {
            $joinAddressValueQuery = Doctrine::getTable('agAddressMjAgAddressValue')->createQuery('a')
                    ->select('a.id')
                    ->from('agAddressMjAgAddressValue a')
                    ->where('a.address_value_id = ?', $form->id_holder)
                    ->andWhere('a.address_id = ?', $joinEntityAddressForm->getObject()->address_id);

            $joinAddressValue = $joinAddressValueQuery->fetchOne();
            // reassign the agAddressValue of the join to the newly
            // selected value.
            $joinAddressValue->address_value_id = $newAddressValue->id;
            $joinAddressValue->save();
            //unset($forms[$key]);
          } else {
            $joinAddressValue = new agAddressMjAgAddressValue();
            $joinAddressValue->address_id = $joinEntityAddressForm->getObject()->address_id;
            $joinAddressValue->address_value_id = $newAddressValue->id;
            $joinAddressValue->save();
            //unset($forms[$key]);
          }
        }
      }
      // If the address_value hasn't been changed, unset the form.
      else {
        //unset($forms[$key]);
      }
    }
    // If the address_value field is blank, unset the form...
    else {
      //unset($forms[$key]);
      // ...if it was populated, delete the existing agAddressMjAgAddressValue
      // object since it is no longer needed.
      if ($form->getObject()->value <> $form->getDefault('value')) {
        $joinAddressValueQuery = Doctrine::getTable('agAddressMjAgAddressValue')->createQuery('a')->select('a.id')
                ->from('agAddressMjAgAddressValue a')
                ->where('a.address_value_id = ?', $form->id_holder)
                ->andWhere('a.address_id = ?', $joinEntityAddressQuery->fetchOne()->address_id);

        if ($join = $joinAddressValueQuery->fetchOne()) {
          $join->delete();
        }
      }
    }
    if ($entJoin = $joinEntityAddressQuery->fetchOne()) {
      $q = Doctrine::getTable('agAddressMjAgAddressValue')->createQuery('a')
              ->select('a.id')->from('agAddressMjAgAddressValue a')
              ->where('a.address_id = ?', $entJoin->address_id);
      if (!($r = $q->fetchOne())) {
        $entAdd = $entJoin->getAgAddress();
        $entJoin->delete();

        // Check to see if this address is used by any other entities.
        // Only delete the address if that is the case.
        $addressContactArray = $entAdd->getAgEntityAddressContact()->getData();
        if (empty($addressContactArray)) {
          // Might want to add further checks to see if this is that last address to use this
          // agAddressGeo and, if so, delete that too.
          $entAdd->getAgAddressGeo()->delete();
          $entAdd->delete();
        }
      }
    }
  }

  /**   * **************************************************************************
   * Saves data in an embedded language form.
   *
   * *************************************************************************** */
  public function saveLanguageForm($form, $joinId)
  {
    if ($form instanceof agEmbeddedAgPersonMjAgLanguageForm) {
      $joinQuery = Doctrine::getTable('agPersonMjAgLanguage')->createQuery('d')
              ->select('d.id')
              ->from('agPersonMjAgLanguage d')
              ->where('d.id =?', $form->getObject()->id);

      if ($form->getObject()->language_id <> null) {
        //Create a new agPersonMjAgLanguageForm. Populate it with an existing object, if it exists.
        //check if the langauge value has changed between page render and form submission.
        //if it has, set the join object's lanquage to the new language.
        if ($form->getObject()->language_id <> $form->getDefault('language_id')) {
          // Have to get the object from the DB. Symfony errors out if we try to save the new one,
          // won't try to update, just does an insert.
          if ($join = $joinQuery->fetchOne()) {
            $join->language_id = $form->getObject()->language_id;
            $join->save();
          } else {
            $form->getObject()->person_id = $this->getObject()->id;
            $form->getObject()->save();
          }
          $joinId = $form->getObject()->id;
          $form->updateObject($form->getDefaults());
//          unset($forms[$key]);
        } else {
          //If it didn't change, just unset it and be done w/ it.
//          unset($forms[$key]);
          $joinId = (isset($form->getObject()->id)) ? $form->getObject()->id : null;
          ////Need this for the agEmbeddedAgPersonLanguageCompetencyForm section.
        }
      } else {
        //If the language form is blank, unset it.
//        unset($forms[$key]);
        //Then see if it was made blank between render and sumbission.
        if ($form->getObject()->language_id <> $form->getDefault('language_id')) {
          //if it was, delete the person-language join and all the associated data.
          //$join = $joinQuery->fetchOne();
          if ($join = $joinQuery->fetchOne()) {
            $competencies = $join->getAgPersonLanguageCompetency();
            $competencies->delete();
            $join->delete();
          }
          $joinId = null;
        }
      }
      return $joinId;
    }
    if ($form instanceof agEmbeddedAgPersonLanguageCompetencyForm) {
      // Check if a competency is selected, and also if there is still
      // an existing person-language join.
      if ($form->getObject()->language_competency_id <> null && $joinId <> null) {
        // Check if it's changed between render and submission.
        if ($form->getObject()->language_competency_id <> $form->getDefault('language_competency_id')) {
          if ($form->getObject()->person_language_id == null) {
            $form->getObject()->person_language_id = $joinId;
          }
          $form->getObject()->save();
        }
//        unset($forms[$key]);
      } else //If there's no competency ID selected, or if the agPersonMjAgLanguage
      //that uses the competency has been deleted.
      if ($form->getObject()->language_competency_id <> $form->getDefault('language_competency_id')) {//If it became blank between render and submit
        //  $form->getObject()->id = $form->getDefault('id');//Set the id and ...
        $form->updateObject($form->getDefaults());
        // ...delete the object.
        $form->getObject()->delete();
//        unset($forms[$key]);
      }
//      unset($forms[$key]);
      return $joinId;
    }
  }

  /*   * ************************************************************
   * Saves the forms embedded on the Person page.
   * @param $forms array of forms to save
   * @param $con the current doctrine connection instance
   * @return a call to the parent form's saveEmbeddedForms method
   * @todo break this method into smaller pieces
   * ************************************************************ */

  public function saveEmbeddedForms($con = null, $forms = null)
  {
    // Something better than isset might be useful here, get rid of the if.
    // For now though, do it this way otherwise, after the form's unset in
    // the saveDoB function, it'll try to get in here again and error.

    /**
     * Date of Birth
     * */
    if (isset($this->embeddedForms['date of birth'])) {
      $this->saveDateOfBirthForm($this->embeddedForms['date of birth']);
      unset($this->embeddedForms['date of birth']);
    }
    /**
     * Name
     * */
    if (isset($this->embeddedForms['name'])) {
      foreach ($this->embeddedForms['name']->embeddedForms as $key => $form) {
        $values = $this->values['name'][$key];
        $this->saveNameForm($key, $form, $values);
        unset($this->embeddedForms['name'][$key]);
      }
    }
    /**
     * Email
     * */
    if (isset($this->embeddedForms['email'])) {
      foreach ($this->embeddedForms['email']->embeddedForms as $key => $form) {
        $values = $this->values['email'][$key];
        $this->saveEmailForm($key, $form, $values);
        unset($this->embeddedForms['email'][$key]);
      }
    }
    /**
     * Phone
     * This is slightly more complex than name or email. Phone values need to be
     * formatted first, as the DB holds them in 2125551212 form, but users will
     * input in (212) 555-1212 form (or 212.555.1212, etc.). Because the values
     * will always be processed, the form's object will always be seen as modified.
     * That's the purpose of calling stat(Doctrine_Record::STATE_CLEAN) on the
     * object. After that, it will return unmodified. The phone number stored in
     * the $values array is also reformatted to be DB friendly.
     * */
    if (isset($this->embeddedForms['phone'])) {
      $phoneFormats = Doctrine::getTable('agPhoneFormatType')
              ->createQuery('a')
              ->execute();
      foreach ($this->embeddedForms['phone']->embeddedForms as $key => $form) {
        $form->getObject()->phone_contact = preg_replace('/[^0-9x]+/', '', $form->getObject()->phone_contact);
        foreach ($phoneFormats as $phoneFormat) {
          if (preg_match($phoneFormat->match_pattern, $form->getObject()->phone_contact)) {
            $form->getObject()->phone_format_id = $phoneFormat->id;
          }
        }
        if ($form->getObject()->phone_contact == $form->getDefault('phone_contact')) {
          $form->getObject()->state(Doctrine_Record::STATE_CLEAN);
        }
        $values = $this->values['phone'][$key];
        $values['phone_contact'] = preg_replace('/[^0-9x]+/', '', $values['phone_contact']);
        $this->savePhoneForm($key, $form, $values);
        unset($this->embeddedForms['phone'][$key]);
      }
    }
    /**
     * Address
     *
     * The saveAddressForm() function is in need of reactoring, which will most likely
     * necessitate some changes here as well
     * */
    if (isset($this->embeddedForms['address'])) {
      foreach ($this->embeddedForms['address']->embeddedForms as $aKey => $addressForm) {
        foreach ($addressForm->embeddedForms as $fKey => $form) {
          $this->saveAddressForm($form);
          unset($this->embeddedForms['address']->embeddedForms[$aKey]->embeddedForms[$fKey]);
        }
        unset($this->embeddedForms['address'][$aKey]);
      }
    }
    /**
     * Language
     *
     * The saveLanguageForm() function is in need of reactoring, which will most likely
     * necessitate some changes here as well
     * */
    if (isset($this->embeddedForms['languages'])) {
      foreach ($this->embeddedForms['languages']->embeddedForms as $lKey => $languageForm) {
        foreach ($languageForm->embeddedForms as $fKey => $form) {
          $joinId = $this->saveLanguageForm($form, (isset($joinId) ? $joinId : null));
          unset($this->embeddedForms['languages']->embeddedForms[$lKey]->embeddedForms[$fKey]);
        }
        unset($this->embeddedForms['languages'][$aKey]);
      }
    }
    /**
     * @todo The if() below needs to be removed/replaced. Right now it is preventing and invalid error on
     * some of the staff specific forms from PluginagStaffPersonForm.
     * */
    if (is_array($forms)) {
      foreach ($forms as $key => $form) {
        if ($form instanceof agEmbeddedStaffForm) {
          unset($forms[$key]);
        }
      }
    }
  }

  /**
   * This function is here to override BaseagPersonForm's doSave() method.
   * This is necessary to remove some of the save...List() functions that
   * Symfony autogenerates for many-to-many relations. The relations are more
   * complex than Symfony is able to auto-determine, and calling the save...List()
   * methods will often cause an error on save. The only lists needed are below.
   *
   * @param Doctrine_Connection $con
   * */
  protected function doSave($con = null)
  {
    $this->saveagNationalityList($con);
    $this->saveagReligionList($con);
    $this->saveagProfessionList($con);
    $this->saveagEthnicityList($con);
    $this->saveagSexList($con);
    $this->saveagMaritalStatusList($con);

    BaseFormDoctrine::doSave($con);
  }

  public function getStylesheets()
  {
    $css = parent::getStylesheets();
    $css['jquery/jquery.ui.custom.css'] = 'all';
    return $css;
  }

  public function getJavaScripts()
  {
    $js = parent::getJavaScripts();
    $js[] = 'jquery.ui.custom.js';
    return $js;
  }

}
