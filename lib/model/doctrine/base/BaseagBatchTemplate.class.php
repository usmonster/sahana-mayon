<?php

/**
 * BaseagBatchTemplate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $batch_template
 * @property string $description
 * @property boolean $app_display
 * @property boolean $reply_expected
 * @property Doctrine_Collection $agMessageTemplate
 * @property Doctrine_Collection $agMesageReplyArgument
 * @property Doctrine_Collection $agEventMessageTrigger
 * @property Doctrine_Collection $agMessageBatchTemplate
 * @property Doctrine_Collection $agBatchTemplateReplyArgument
 * @property Doctrine_Collection $agMessageBatch
 * @property Doctrine_Collection $agShiftTemplateMessage
 * 
 * @method integer             getId()                           Returns the current record's "id" value
 * @method string              getBatchTemplate()                Returns the current record's "batch_template" value
 * @method string              getDescription()                  Returns the current record's "description" value
 * @method boolean             getAppDisplay()                   Returns the current record's "app_display" value
 * @method boolean             getReplyExpected()                Returns the current record's "reply_expected" value
 * @method Doctrine_Collection getAgMessageTemplate()            Returns the current record's "agMessageTemplate" collection
 * @method Doctrine_Collection getAgMesageReplyArgument()        Returns the current record's "agMesageReplyArgument" collection
 * @method Doctrine_Collection getAgEventMessageTrigger()        Returns the current record's "agEventMessageTrigger" collection
 * @method Doctrine_Collection getAgMessageBatchTemplate()       Returns the current record's "agMessageBatchTemplate" collection
 * @method Doctrine_Collection getAgBatchTemplateReplyArgument() Returns the current record's "agBatchTemplateReplyArgument" collection
 * @method Doctrine_Collection getAgMessageBatch()               Returns the current record's "agMessageBatch" collection
 * @method Doctrine_Collection getAgShiftTemplateMessage()       Returns the current record's "agShiftTemplateMessage" collection
 * @method agBatchTemplate     setId()                           Sets the current record's "id" value
 * @method agBatchTemplate     setBatchTemplate()                Sets the current record's "batch_template" value
 * @method agBatchTemplate     setDescription()                  Sets the current record's "description" value
 * @method agBatchTemplate     setAppDisplay()                   Sets the current record's "app_display" value
 * @method agBatchTemplate     setReplyExpected()                Sets the current record's "reply_expected" value
 * @method agBatchTemplate     setAgMessageTemplate()            Sets the current record's "agMessageTemplate" collection
 * @method agBatchTemplate     setAgMesageReplyArgument()        Sets the current record's "agMesageReplyArgument" collection
 * @method agBatchTemplate     setAgEventMessageTrigger()        Sets the current record's "agEventMessageTrigger" collection
 * @method agBatchTemplate     setAgMessageBatchTemplate()       Sets the current record's "agMessageBatchTemplate" collection
 * @method agBatchTemplate     setAgBatchTemplateReplyArgument() Sets the current record's "agBatchTemplateReplyArgument" collection
 * @method agBatchTemplate     setAgMessageBatch()               Sets the current record's "agMessageBatch" collection
 * @method agBatchTemplate     setAgShiftTemplateMessage()       Sets the current record's "agShiftTemplateMessage" collection
 * 
 * @package    AGASTI_CORE
 * @subpackage model
 * @author     CUNY SPS
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseagBatchTemplate extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ag_batch_template');
        $this->hasColumn('id', 'integer', 2, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 2,
             ));
        $this->hasColumn('batch_template', 'string', 30, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 30,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('app_display', 'boolean', null, array(
             'default' => 1,
             'type' => 'boolean',
             'notnull' => true,
             ));
        $this->hasColumn('reply_expected', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));


        $this->index('agBatchTemplate_unq', array(
             'fields' => 
             array(
              0 => 'batch_template',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('agMessageTemplate', array(
             'refClass' => 'agMessageBatchTemplate',
             'local' => 'batch_template_id',
             'foreign' => 'message_template_id'));

        $this->hasMany('agMessageReplyArgument as agMesageReplyArgument', array(
             'refClass' => 'agBatchTemplateReplyArgument',
             'local' => 'batch_template_id',
             'foreign' => 'message_reply_argument_id'));

        $this->hasMany('agEventMessageTrigger', array(
             'local' => 'id',
             'foreign' => 'batch_template_id'));

        $this->hasMany('agMessageBatchTemplate', array(
             'local' => 'id',
             'foreign' => 'batch_template_id'));

        $this->hasMany('agBatchTemplateReplyArgument', array(
             'local' => 'id',
             'foreign' => 'batch_template_id'));

        $this->hasMany('agMessageBatch', array(
             'local' => 'id',
             'foreign' => 'batch_template_id'));

        $this->hasMany('agShiftTemplateMessage', array(
             'local' => 'id',
             'foreign' => 'batch_template_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}