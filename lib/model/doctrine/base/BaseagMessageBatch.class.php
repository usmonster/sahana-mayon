<?php

/**
 * BaseagMessageBatch
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $event_id
 * @property integer $batch_template_id
 * @property timestamp $execution_time
 * @property agEvent $agEvent
 * @property agBatchTemplate $agBatchTemplate
 * @property Doctrine_Collection $agEntity
 * @property Doctrine_Collection $agMessage
 * 
 * @method integer             getId()                Returns the current record's "id" value
 * @method integer             getEventId()           Returns the current record's "event_id" value
 * @method integer             getBatchTemplateId()   Returns the current record's "batch_template_id" value
 * @method timestamp           getExecutionTime()     Returns the current record's "execution_time" value
 * @method agEvent             getAgEvent()           Returns the current record's "agEvent" value
 * @method agBatchTemplate     getAgBatchTemplate()   Returns the current record's "agBatchTemplate" value
 * @method Doctrine_Collection getAgEntity()          Returns the current record's "agEntity" collection
 * @method Doctrine_Collection getAgMessage()         Returns the current record's "agMessage" collection
 * @method agMessageBatch      setId()                Sets the current record's "id" value
 * @method agMessageBatch      setEventId()           Sets the current record's "event_id" value
 * @method agMessageBatch      setBatchTemplateId()   Sets the current record's "batch_template_id" value
 * @method agMessageBatch      setExecutionTime()     Sets the current record's "execution_time" value
 * @method agMessageBatch      setAgEvent()           Sets the current record's "agEvent" value
 * @method agMessageBatch      setAgBatchTemplate()   Sets the current record's "agBatchTemplate" value
 * @method agMessageBatch      setAgEntity()          Sets the current record's "agEntity" collection
 * @method agMessageBatch      setAgMessage()         Sets the current record's "agMessage" collection
 * 
 * @package    AGASTI_CORE
 * @subpackage model
 * @author     CUNY SPS
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseagMessageBatch extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ag_message_batch');
        $this->hasColumn('id', 'integer', 5, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 5,
             ));
        $this->hasColumn('event_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('batch_template_id', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 2,
             ));
        $this->hasColumn('execution_time', 'timestamp', null, array(
             'type' => 'timestamp',
             'notnull' => true,
             ));


        $this->index('UX_agMessageBatch', array(
             'fields' => 
             array(
              0 => 'event_id',
              1 => 'batch_template_id',
              2 => 'execution_time',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('agEvent', array(
             'local' => 'event_id',
             'foreign' => 'id'));

        $this->hasOne('agBatchTemplate', array(
             'local' => 'batch_template_id',
             'foreign' => 'id'));

        $this->hasMany('agEntity', array(
             'refClass' => 'agMessage',
             'local' => 'message_batch_id',
             'foreign' => 'recipient_id'));

        $this->hasMany('agMessage', array(
             'local' => 'id',
             'foreign' => 'message_batch_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}