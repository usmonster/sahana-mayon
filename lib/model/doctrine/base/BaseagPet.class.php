<?php

/**
 * BaseagPet
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $pet_name
 * @property integer $event_id
 * @property integer $sex_id
 * @property integer $species_id
 * @property integer $age
 * @property date $age_date_recorded
 * @property gzip $physical_description
 * @property agEvent $agEvent
 * @property agSex $agSex
 * @property agSpecies $agSpecies
 * @property Doctrine_Collection $agPetSubSpecies
 * @property Doctrine_Collection $agPetCaretaker
 * @property Doctrine_Collection $agPetAllocationStatus
 * @property Doctrine_Collection $agPetNote
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method string              getPetName()               Returns the current record's "pet_name" value
 * @method integer             getEventId()               Returns the current record's "event_id" value
 * @method integer             getSexId()                 Returns the current record's "sex_id" value
 * @method integer             getSpeciesId()             Returns the current record's "species_id" value
 * @method integer             getAge()                   Returns the current record's "age" value
 * @method date                getAgeDateRecorded()       Returns the current record's "age_date_recorded" value
 * @method gzip                getPhysicalDescription()   Returns the current record's "physical_description" value
 * @method agEvent             getAgEvent()               Returns the current record's "agEvent" value
 * @method agSex               getAgSex()                 Returns the current record's "agSex" value
 * @method agSpecies           getAgSpecies()             Returns the current record's "agSpecies" value
 * @method Doctrine_Collection getAgPetSubSpecies()       Returns the current record's "agPetSubSpecies" collection
 * @method Doctrine_Collection getAgPetCaretaker()        Returns the current record's "agPetCaretaker" collection
 * @method Doctrine_Collection getAgPetAllocationStatus() Returns the current record's "agPetAllocationStatus" collection
 * @method Doctrine_Collection getAgPetNote()             Returns the current record's "agPetNote" collection
 * @method agPet               setId()                    Sets the current record's "id" value
 * @method agPet               setPetName()               Sets the current record's "pet_name" value
 * @method agPet               setEventId()               Sets the current record's "event_id" value
 * @method agPet               setSexId()                 Sets the current record's "sex_id" value
 * @method agPet               setSpeciesId()             Sets the current record's "species_id" value
 * @method agPet               setAge()                   Sets the current record's "age" value
 * @method agPet               setAgeDateRecorded()       Sets the current record's "age_date_recorded" value
 * @method agPet               setPhysicalDescription()   Sets the current record's "physical_description" value
 * @method agPet               setAgEvent()               Sets the current record's "agEvent" value
 * @method agPet               setAgSex()                 Sets the current record's "agSex" value
 * @method agPet               setAgSpecies()             Sets the current record's "agSpecies" value
 * @method agPet               setAgPetSubSpecies()       Sets the current record's "agPetSubSpecies" collection
 * @method agPet               setAgPetCaretaker()        Sets the current record's "agPetCaretaker" collection
 * @method agPet               setAgPetAllocationStatus() Sets the current record's "agPetAllocationStatus" collection
 * @method agPet               setAgPetNote()             Sets the current record's "agPetNote" collection
 * 
 * @package    AGASTI_CORE
 * @subpackage model
 * @author     CUNY SPS
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseagPet extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ag_pet');
        $this->hasColumn('id', 'integer', 4, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('pet_name', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('event_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('sex_id', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 2,
             ));
        $this->hasColumn('species_id', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 2,
             ));
        $this->hasColumn('age', 'integer', 1, array(
             'type' => 'integer',
             'length' => 1,
             ));
        $this->hasColumn('age_date_recorded', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('physical_description', 'gzip', null, array(
             'type' => 'gzip',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('agEvent', array(
             'local' => 'event_id',
             'foreign' => 'id'));

        $this->hasOne('agSex', array(
             'local' => 'sex_id',
             'foreign' => 'id'));

        $this->hasOne('agSpecies', array(
             'local' => 'species_id',
             'foreign' => 'id'));

        $this->hasMany('agPetSubSpecies', array(
             'local' => 'id',
             'foreign' => 'pet_id'));

        $this->hasMany('agPetCaretaker', array(
             'local' => 'id',
             'foreign' => 'pet_id'));

        $this->hasMany('agPetAllocationStatus', array(
             'local' => 'id',
             'foreign' => 'pet_id'));

        $this->hasMany('agPetNote', array(
             'local' => 'id',
             'foreign' => 'pet_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}