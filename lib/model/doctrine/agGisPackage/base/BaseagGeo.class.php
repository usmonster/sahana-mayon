<?php

/**
 * BaseagGeo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $geo_coordinate_hash
 * @property integer $geo_type_id
 * @property integer $geo_source_id
 * @property agGeoType $agGeoType
 * @property agGeoSource $agGeoSource
 * @property Doctrine_Collection $agAffectedArea
 * @property Doctrine_Collection $agEventServiceAreaComposite
 * @property Doctrine_Collection $agGeoFeature
 * @property Doctrine_Collection $agAddressGeo
 * @property Doctrine_Collection $agGeoRelationship
 * @property Doctrine_Collection $agAffectedAreaTemplate
 * @property Doctrine_Collection $agScenarioServiceAreaComposite
 * 
 * @method integer             getId()                             Returns the current record's "id" value
 * @method string              getGeoCoordinateHash()              Returns the current record's "geo_coordinate_hash" value
 * @method integer             getGeoTypeId()                      Returns the current record's "geo_type_id" value
 * @method integer             getGeoSourceId()                    Returns the current record's "geo_source_id" value
 * @method agGeoType           getAgGeoType()                      Returns the current record's "agGeoType" value
 * @method agGeoSource         getAgGeoSource()                    Returns the current record's "agGeoSource" value
 * @method Doctrine_Collection getAgAffectedArea()                 Returns the current record's "agAffectedArea" collection
 * @method Doctrine_Collection getAgEventServiceAreaComposite()    Returns the current record's "agEventServiceAreaComposite" collection
 * @method Doctrine_Collection getAgGeoFeature()                   Returns the current record's "agGeoFeature" collection
 * @method Doctrine_Collection getAgAddressGeo()                   Returns the current record's "agAddressGeo" collection
 * @method Doctrine_Collection getAgGeoRelationship()              Returns the current record's "agGeoRelationship" collection
 * @method Doctrine_Collection getAgAffectedAreaTemplate()         Returns the current record's "agAffectedAreaTemplate" collection
 * @method Doctrine_Collection getAgScenarioServiceAreaComposite() Returns the current record's "agScenarioServiceAreaComposite" collection
 * @method agGeo               setId()                             Sets the current record's "id" value
 * @method agGeo               setGeoCoordinateHash()              Sets the current record's "geo_coordinate_hash" value
 * @method agGeo               setGeoTypeId()                      Sets the current record's "geo_type_id" value
 * @method agGeo               setGeoSourceId()                    Sets the current record's "geo_source_id" value
 * @method agGeo               setAgGeoType()                      Sets the current record's "agGeoType" value
 * @method agGeo               setAgGeoSource()                    Sets the current record's "agGeoSource" value
 * @method agGeo               setAgAffectedArea()                 Sets the current record's "agAffectedArea" collection
 * @method agGeo               setAgEventServiceAreaComposite()    Sets the current record's "agEventServiceAreaComposite" collection
 * @method agGeo               setAgGeoFeature()                   Sets the current record's "agGeoFeature" collection
 * @method agGeo               setAgAddressGeo()                   Sets the current record's "agAddressGeo" collection
 * @method agGeo               setAgGeoRelationship()              Sets the current record's "agGeoRelationship" collection
 * @method agGeo               setAgAffectedAreaTemplate()         Sets the current record's "agAffectedAreaTemplate" collection
 * @method agGeo               setAgScenarioServiceAreaComposite() Sets the current record's "agScenarioServiceAreaComposite" collection
 * 
 * @package    AGASTI_CORE
 * @subpackage model
 * @author     CUNY SPS
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseagGeo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ag_geo');
        $this->hasColumn('id', 'integer', 5, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 5,
             ));
        $this->hasColumn('geo_coordinate_hash', 'string', 128, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 128,
             ));
        $this->hasColumn('geo_type_id', 'integer', 2, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 2,
             ));
        $this->hasColumn('geo_source_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));


        $this->index('UX_agGeo_hash', array(
             'fields' => 
             array(
              0 => 'geo_coordinate_hash',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('agGeoType', array(
             'local' => 'geo_type_id',
             'foreign' => 'id'));

        $this->hasOne('agGeoSource', array(
             'local' => 'geo_source_id',
             'foreign' => 'id'));

        $this->hasMany('agAffectedArea', array(
             'local' => 'id',
             'foreign' => 'geo_id'));

        $this->hasMany('agEventServiceAreaComposite', array(
             'local' => 'id',
             'foreign' => 'geo_id'));

        $this->hasMany('agGeoFeature', array(
             'local' => 'id',
             'foreign' => 'geo_id'));

        $this->hasMany('agAddressGeo', array(
             'local' => 'id',
             'foreign' => 'geo_id'));

        $this->hasMany('agGeoRelationship', array(
             'local' => 'id',
             'foreign' => 'geo_id1'));

        $this->hasMany('agAffectedAreaTemplate', array(
             'local' => 'id',
             'foreign' => 'geo_id'));

        $this->hasMany('agScenarioServiceAreaComposite', array(
             'local' => 'id',
             'foreign' => 'geo_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}