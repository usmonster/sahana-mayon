<?php

/**
 * BaseagGeoType
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $geo_type
 * @property integer $minimum_coordinate_points
 * @property integer $maximum_coordinate_points
 * @property string $description
 * @property boolean $app_display
 * @property Doctrine_Collection $agGeo
 * 
 * @method integer             getId()                        Returns the current record's "id" value
 * @method string              getGeoType()                   Returns the current record's "geo_type" value
 * @method integer             getMinimumCoordinatePoints()   Returns the current record's "minimum_coordinate_points" value
 * @method integer             getMaximumCoordinatePoints()   Returns the current record's "maximum_coordinate_points" value
 * @method string              getDescription()               Returns the current record's "description" value
 * @method boolean             getAppDisplay()                Returns the current record's "app_display" value
 * @method Doctrine_Collection getAgGeo()                     Returns the current record's "agGeo" collection
 * @method agGeoType           setId()                        Sets the current record's "id" value
 * @method agGeoType           setGeoType()                   Sets the current record's "geo_type" value
 * @method agGeoType           setMinimumCoordinatePoints()   Sets the current record's "minimum_coordinate_points" value
 * @method agGeoType           setMaximumCoordinatePoints()   Sets the current record's "maximum_coordinate_points" value
 * @method agGeoType           setDescription()               Sets the current record's "description" value
 * @method agGeoType           setAppDisplay()                Sets the current record's "app_display" value
 * @method agGeoType           setAgGeo()                     Sets the current record's "agGeo" collection
 * 
 * @package    AGASTI_CORE
 * @subpackage model
 * @author     CUNY SPS
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseagGeoType extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ag_geo_type');
        $this->hasColumn('id', 'integer', 2, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 2,
             ));
        $this->hasColumn('geo_type', 'string', 30, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 30,
             ));
        $this->hasColumn('minimum_coordinate_points', 'integer', 1, array(
             'default' => 1,
             'type' => 'integer',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('maximum_coordinate_points', 'integer', 1, array(
             'default' => -1,
             'type' => 'integer',
             'notnull' => true,
             'length' => 1,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('app_display', 'boolean', null, array(
             'default' => 1,
             'type' => 'boolean',
             'notnull' => true,
             ));


        $this->index('agGeoType_unq', array(
             'fields' => 
             array(
              0 => 'geo_type',
             ),
             'type' => 'unique',
             ));
        $this->index('IX_agGeoType_minCoorPt', array(
             'fields' => 
             array(
              0 => 'minimum_coordinate_points',
             ),
             ));
        $this->index('IX_agGeoType_maxCoorPt', array(
             'fields' => 
             array(
              0 => 'maximum_coordinate_points',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('agGeo', array(
             'local' => 'id',
             'foreign' => 'geo_type_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}