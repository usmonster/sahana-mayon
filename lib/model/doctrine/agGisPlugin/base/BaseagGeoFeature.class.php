<?php

/**
 * BaseagGeoFeature
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $geo_id
 * @property integer $geo_coordinate_id
 * @property integer $geo_coordinate_order
 * @property agGeoCoordinate $agGeoCoordinate
 * @property agGeo $agGeo
 * 
 * @method integer         getId()                   Returns the current record's "id" value
 * @method integer         getGeoId()                Returns the current record's "geo_id" value
 * @method integer         getGeoCoordinateId()      Returns the current record's "geo_coordinate_id" value
 * @method integer         getGeoCoordinateOrder()   Returns the current record's "geo_coordinate_order" value
 * @method agGeoCoordinate getAgGeoCoordinate()      Returns the current record's "agGeoCoordinate" value
 * @method agGeo           getAgGeo()                Returns the current record's "agGeo" value
 * @method agGeoFeature    setId()                   Sets the current record's "id" value
 * @method agGeoFeature    setGeoId()                Sets the current record's "geo_id" value
 * @method agGeoFeature    setGeoCoordinateId()      Sets the current record's "geo_coordinate_id" value
 * @method agGeoFeature    setGeoCoordinateOrder()   Sets the current record's "geo_coordinate_order" value
 * @method agGeoFeature    setAgGeoCoordinate()      Sets the current record's "agGeoCoordinate" value
 * @method agGeoFeature    setAgGeo()                Sets the current record's "agGeo" value
 * 
 * @package    AGASTI_CORE
 * @subpackage model
 * @author     CUNY SPS
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseagGeoFeature extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ag_geo_feature');
        $this->hasColumn('id', 'integer', 5, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'length' => 5,
             ));
        $this->hasColumn('geo_id', 'integer', 5, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 5,
             ));
        $this->hasColumn('geo_coordinate_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('geo_coordinate_order', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));


        $this->index('UX_agGeoFeature_coordinate', array(
             'fields' => 
             array(
              0 => 'geo_id',
              1 => 'geo_coordinate_id',
             ),
             'type' => 'unique',
             ));
        $this->index('agGeoFeature_geoId', array(
             'fields' => 
             array(
              0 => 'geo_id',
             ),
             ));
        $this->index('agGeoFeature_geoCoordinateId', array(
             'fields' => 
             array(
              0 => 'geo_coordinate_id',
             ),
             ));
        $this->index('UX_agGeoFeature_order', array(
             'fields' => 
             array(
              0 => 'geo_id',
              1 => 'geo_coordinate_order',
             ),
             'type' => 'unique',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('agGeoCoordinate', array(
             'local' => 'geo_coordinate_id',
             'foreign' => 'id'));

        $this->hasOne('agGeo', array(
             'local' => 'geo_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}